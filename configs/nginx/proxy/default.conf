# HTTP to HTTPS redirect
server {
    listen 80;
    server_name _;
    
    # Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect all HTTP to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# Upstream definitions for service discovery
upstream web_backend {
    server web-backend:80 max_fails=3 fail_timeout=30s;
}

# Main Web Dashboard - HTTPS
server {
    listen 443 ssl;
    http2 on;
    server_name _;
    
    # SSL Configuration for Web Dashboard
    ssl_certificate /etc/nginx/ssl/web/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/web/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Web Dashboard
    location / {
        proxy_pass http://web_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://web_backend/health;
        access_log off;
    }
    
    # API proxy to IoT service (with graceful fallback for when service is unavailable)
    location /api/ {
        # Use resolver for dynamic resolution
        resolver 127.0.0.11 valid=30s;
        set $iot_upstream "iot-service:8080";
        
        proxy_pass http://$iot_upstream/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Handle service unavailable gracefully
        proxy_intercept_errors on;
        error_page 502 503 504 = @api_unavailable;
    }
    
    # Fallback for API when service is unavailable
    location @api_unavailable {
        add_header Content-Type application/json always;
        return 503 '{"error": "API service temporarily unavailable", "status": 503}';
    }
}

# Portainer - HTTPS on port 9443 (with graceful fallback)
server {
    listen 9443 ssl;
    http2 on;
    server_name _;
    
    # SSL Configuration for Portainer
    ssl_certificate /etc/nginx/ssl/portainer/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/portainer/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    
    # Portainer proxy (with graceful fallback)
    location / {
        # Use resolver for dynamic resolution
        resolver 127.0.0.11 valid=30s;
        set $portainer_upstream "portainer:9000";
        
        proxy_pass http://$portainer_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support for Portainer
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Increase timeouts for Portainer
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Handle service unavailable gracefully
        proxy_intercept_errors on;
        error_page 502 503 504 = @portainer_unavailable;
    }
    
    # Fallback for Portainer when service is unavailable
    location @portainer_unavailable {
        add_header Content-Type text/html;
        return 503 '<html><body><h1>Portainer Temporarily Unavailable</h1><p>The container management service is starting up. Please try again in a moment.</p></body></html>';
    }
}

# IoT API - HTTPS on port 8443 (with graceful fallback)
server {
    listen 8443 ssl;
    http2 on;
    server_name _;
    
    # SSL Configuration for IoT API
    ssl_certificate /etc/nginx/ssl/iot/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/iot/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # IoT API (with graceful fallback)
    location / {
        # Use resolver for dynamic resolution
        resolver 127.0.0.11 valid=30s;
        set $iot_upstream "iot-service:8080";
        
        proxy_pass http://$iot_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # CORS headers for API access
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
        
        # Handle service unavailable gracefully
        proxy_intercept_errors on;
        error_page 502 503 504 = @iot_unavailable;
    }
    
    # Fallback for IoT API when service is unavailable
    location @iot_unavailable {
        add_header Content-Type application/json always;
        return 503 '{"error": "IoT API service temporarily unavailable", "status": 503}';
    }
}